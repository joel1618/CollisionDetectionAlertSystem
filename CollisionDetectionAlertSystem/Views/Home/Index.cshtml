@model CollisionDetectionAlertSystem.Models.MovingObjectViewModel
@{
    ViewBag.Title = "Home Page";
}
<style>
    .row {
        font-size: 20px;
    }

    .statusclear {
        background-color: green;
        width: 110px;
        height: 20px;
    }

    .statuswarning {
        background-color: yellow;
        width: 110px;
        height: 20px;
    }

    .statuserror {
        background-color: red;
        width: 110px;
        height: 20px;
    }

    .vcenter {
        display: inline-block;
        vertical-align: middle;
    }
</style>
<script src="http://maps.googleapis.com/maps/api/js"></script>
<script type="text/javascript">
    var map = null;
    var primaryBoundingBox, secondaryBoundingBoxes = [];
    $(document).ready(function () {
        $("#modeoftransportation").text("Walking");
        $('#trackposition').bootstrapToggle('on');
        

        $("#walking").click(function () {
            $("#modeoftransportation").text("Walking");
            ReevaluateMapZoom();
            ReevaluateLatitudeLongitude();
        });

        $("#driving").click(function () {
            $("#modeoftransportation").text("Driving");
            ReevaluateMapZoom();
            ReevaluateLatitudeLongitude();
        });

        $("#flying").click(function () {
            $("#modeoftransportation").text("Flying");
            ReevaluateMapZoom();
            ReevaluateLatitudeLongitude();
        });

        $('#trackposition').change(function () {
            userActionPreventingSetCenter = 0;
            ReevaluateLatitudeLongitude();
        });

        var firstRun = true;
        //navigator.geolocation.watchPosition(success, error, options)
        navigator.geolocation.watchPosition(function (e) {
            $("#speed").text(GetSpeed(e).toString());
            $("#lat").text(GetLatitude(e).toString());
            $("#long").text(GetLongitude(e).toString());
            $("#fingerprint").text(new Fingerprint().get());
            $("#heading").text(GetHeading(e).toString());
            if (firstRun) {
                firstRun = false;
                SetupMap();
                Initialize();
            }
        }, function (e) { }, { enableHighAccuracy: false, maximumAge: 30000 });

    });

    function Initialize() {
        //check the status based on the parameters from the form.
        var MovingObjectViewModel = {
            Fingerprint: parseInt($("#fingerprint").text()),
            Speed: GetSpeed(),
            Latitude: GetLatitude(),
            Longitude: GetLongitude(),
            Heading: GetHeading(),
            ModeOfTransportation: GetModeOfTransportation()
        }
        $.ajax({
            type: "POST",
            url: "/Home/CheckStatus",
            cache: false,
            data: MovingObjectViewModel,
            success: function (data) {
                if (data._movingObject.MovingObject != null && data._movingObject.MovingObject != undefined) {
                    AddUpdatePrimaryBoundingBox(data._movingObject.MovingObject);
                    EvaluateStatus(data);
                }
                if (data._movingObject.OtherMovingObjects != null) {
                    EvaluateSecondaryBoundingBox(data._movingObject.OtherMovingObjects);
                }
                else {
                    ClearSecondaryBoundingBoxes();
                }
                ReevaluateLatitudeLongitude();
                setTimeout(function () {
                    Initialize();
                }, 1000);
            },
            error: function (data) {
                ClearBoundingBoxes();
                alert("Error: " + data.message + ". Connection to server may have been lost. Connection retry in 10 seconds.");
                setTimeout(function () {
                    Initialize();
                }, 10000);
            }
        });
    }

    function AddUpdatePrimaryBoundingBox(data) {
        if (primaryBoundingBox == null) {

            var primaryBoundingBoxCoordinates = [
                new google.maps.LatLng(data.BoundingBox.FrontLeftCorner.Latitude, data.BoundingBox.FrontLeftCorner.Longitude),
                new google.maps.LatLng(data.BoundingBox.FrontRightCorner.Latitude, data.BoundingBox.FrontRightCorner.Longitude),
                new google.maps.LatLng(data.BoundingBox.BackRightCorner.Latitude, data.BoundingBox.BackRightCorner.Longitude),
                new google.maps.LatLng(data.BoundingBox.BackLeftCorner.Latitude, data.BoundingBox.BackLeftCorner.Longitude),
                new google.maps.LatLng(data.BoundingBox.FrontLeftCorner.Latitude, data.BoundingBox.FrontLeftCorner.Longitude)
            ]
            primaryBoundingBox = new google.maps.Polygon({
                path: primaryBoundingBoxCoordinates,
                strokeColor: data.Status,
                strokeOpacity: 0.8,
                strokeWeight: 2,
                fillColor: data.Status,
                fillOpacity: 0.35
            });
            primaryBoundingBox.setMap(map);
        }
        else {
            var primaryBoundingBoxCoordinates = [
                new google.maps.LatLng(data.BoundingBox.FrontLeftCorner.Latitude, data.BoundingBox.FrontLeftCorner.Longitude),
                new google.maps.LatLng(data.BoundingBox.FrontRightCorner.Latitude, data.BoundingBox.FrontRightCorner.Longitude),
                new google.maps.LatLng(data.BoundingBox.BackRightCorner.Latitude, data.BoundingBox.BackRightCorner.Longitude),
                new google.maps.LatLng(data.BoundingBox.BackLeftCorner.Latitude, data.BoundingBox.BackLeftCorner.Longitude),
                new google.maps.LatLng(data.BoundingBox.FrontLeftCorner.Latitude, data.BoundingBox.FrontLeftCorner.Longitude)
            ]
            primaryBoundingBox.setPath(primaryBoundingBoxCoordinates);
            primaryBoundingBox.setOptions({ strokeColor: data.Status, fillColor: data.Status });
            primaryBoundingBox.setMap(map);
        }
        ReevaluateLatitudeLongitude();
    }

    //http://stackoverflow.com/questions/14966207/javascript-sync-two-arrays-of-objects-find-delta
    function EvaluateSecondaryBoundingBox(data) {
        var mapMap = mapFromArray(secondaryBoundingBoxes, 'fingerprint');
        var mapData = mapFromArray(data, 'Fingerprint');
        for (var id in mapMap) {
            if (!mapData.hasOwnProperty(id)) {
                DeleteSecondaryBoundingBox(mapMap[id]);
            } else if (isEqual(mapData[id], mapMap[id])) {
                UpdateSecondaryBoundingBox(mapData[id]);
            }
        }
        for (var id in mapData) {
            if (!mapMap.hasOwnProperty(id)) {
                AddSecondaryBoundingBox(mapData[id]);
            }
        }
    }

    function AddSecondaryBoundingBox(data) {
        var secondaryBoundingBoxCoordinates = [
                new google.maps.LatLng(data.BoundingBox.FrontLeftCorner.Latitude, data.BoundingBox.FrontLeftCorner.Longitude),
                new google.maps.LatLng(data.BoundingBox.FrontRightCorner.Latitude, data.BoundingBox.FrontRightCorner.Longitude),
                new google.maps.LatLng(data.BoundingBox.BackRightCorner.Latitude, data.BoundingBox.BackRightCorner.Longitude),
                new google.maps.LatLng(data.BoundingBox.BackLeftCorner.Latitude, data.BoundingBox.BackLeftCorner.Longitude),
                new google.maps.LatLng(data.BoundingBox.FrontLeftCorner.Latitude, data.BoundingBox.FrontLeftCorner.Longitude)
        ]
        var boundingBox = {
            fingerprint: data.Fingerprint,
            boundingBox: new google.maps.Polygon({
                path: secondaryBoundingBoxCoordinates,
                strokeColor: data.Status,
                strokeOpacity: 0.8,
                strokeWeight: 2,
                fillColor: data.Status,
                fillOpacity: 0.35
            })

        }
        boundingBox.boundingBox.setMap(map);

        var insertedIntoArray = false;
        for (var i = 0; i < secondaryBoundingBoxes.length; i++) {
            if (secondaryBoundingBoxes[i] == null) {
                secondaryBoundingBoxes[i] = boundingBox;
                insertedIntoArray = true;
            }
        }
        if (!insertedIntoArray)
            secondaryBoundingBoxes.push(boundingBox);
    }

    function UpdateSecondaryBoundingBox(data) {
        var secondaryBoundingBoxCoordinates = [
                            new google.maps.LatLng(data.BoundingBox.FrontLeftCorner.Latitude, data.BoundingBox.FrontLeftCorner.Longitude),
                            new google.maps.LatLng(data.BoundingBox.FrontRightCorner.Latitude, data.BoundingBox.FrontRightCorner.Longitude),
                            new google.maps.LatLng(data.BoundingBox.BackRightCorner.Latitude, data.BoundingBox.BackRightCorner.Longitude),
                            new google.maps.LatLng(data.BoundingBox.BackLeftCorner.Latitude, data.BoundingBox.BackLeftCorner.Longitude),
                            new google.maps.LatLng(data.BoundingBox.FrontLeftCorner.Latitude, data.BoundingBox.FrontLeftCorner.Longitude)
        ]
        for (var i = 0; i < secondaryBoundingBoxes.length; i++) {
            if (secondaryBoundingBoxes[i] != null && data.Fingerprint === secondaryBoundingBoxes[i].fingerprint) {
                secondaryBoundingBoxes[i].boundingBox.setPath(secondaryBoundingBoxCoordinates);
                secondaryBoundingBoxes[i].boundingBox.setOptions({ strokeColor: data.Status, fillColor: data.Status });
                secondaryBoundingBoxes[i].boundingBox.setMap(map);
            }
        }
    }

    function DeleteSecondaryBoundingBox(data) {
        for (var i = 0; i < secondaryBoundingBoxes.length; i++) {
            if (data.fingerprint != null && secondaryBoundingBoxes[i] != null && secondaryBoundingBoxes[i].fingerprint != null) {
                if (data.fingerprint === secondaryBoundingBoxes[i].fingerprint) {
                    secondaryBoundingBoxes[i].boundingBox.setMap(null);
                    secondaryBoundingBoxes[i] = null;
                }
            }
        }
    }

    function mapFromArray(array, prop) {
        var map = {};
        for (var i = 0; i < array.length; i++) {
            if (array[i] !== undefined && array[i] != null)
                map[array[i][prop]] = array[i];
        }
        return map;
    }

    function isEqual(a, b) {
        return a.Fingerprint === b.fingerprint;
    }

    //HELPER METHODS BELOW
    function ParseJsonDate(jsonDateString) {
        return new Date(parseInt(jsonDateString.replace('/Date(', '')));
    }

    function EvaluateStatus(data) {
        if (data._movingObject.MovingObject.Status == 'red') {
            $("#statuscolor").removeClass("statusclear").removeClass("statuswarning").addClass("statuserror");
        }
        else if (data._movingObject.MovingObject.Status == 'warning') {
            $("#statuscolor").removeClass("statusclear").addClass("statuswarning").removeClass("statuserror");
        }
        else {
            $("#statuscolor").addClass("statusclear").removeClass("statuswarning").removeClass("statuserror");
        }
    }

    function ClearBoundingBoxes() {
        if (primaryBoundingBox != null) {
            primaryBoundingBox.setMap(null);
        }
        ClearSecondaryBoundingBoxes();
    }

    function ClearSecondaryBoundingBoxes() {
        if (secondaryBoundingBoxes != null && secondaryBoundingBoxes.length > 0) {
            for (var i = 0; i < secondaryBoundingBoxes.length; i++) {
                if (secondaryBoundingBoxes[i] != null)
                    secondaryBoundingBoxes[i].boundingBox.setMap(null);
            }
            secondaryBoundingBoxes.length = 0;
            secondaryBoundingBoxes = null;
        }
    }

    var userActionPreventingSetCenter = 0, userDraggingMap = false;
    function InitDragListeners() {
        google.maps.event.addListener(map, 'dragend', function () {
            userDraggingMap = false;
            userActionPreventingSetCenter++;
            setTimeout(function () {
                if (userActionPreventingSetCenter != 0) userActionPreventingSetCenter--;
                ReevaluateLatitudeLongitude();
            }, 10000);
        });

        google.maps.event.addListener(map, 'drag', function () {
            userDraggingMap = true;
        });

        google.maps.event.addListener(map, 'zoom_changed', function () {
            userActionPreventingSetCenter++;
            setTimeout(function () {
                userActionPreventingSetCenter--;
                ReevaluateLatitudeLongitude();
            }, 10000);
        })
    }

    function SetupMap() {
        var mapProp = {
            center: new google.maps.LatLng(GetLatitude(), GetLongitude()),
            zoom: GetMapZoom(),
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            styles: GetMapStyle()
        };
        map = new google.maps.Map(document.getElementById("map"), mapProp);
        InitDragListeners();
    }

    function GetMapZoom() {
        if (GetModeOfTransportation() === 0) {
            return 19;
        }
        else if (GetModeOfTransportation() === 1) {
            return 18;
        }
        else {
            return 17;
        }
    }

    function ReevaluateMapZoom() {
        if (map != null) {
            if (GetModeOfTransportation() === 0) {
                map.setZoom(19);
            }
            else if (GetModeOfTransportation() === 1) {
                map.setZoom(18);
            }
            else {
                map.setZoom(17);
            }
        }
    }

    function ReevaluateLatitudeLongitude() {
        if (map != null && userActionPreventingSetCenter == 0 && userDraggingMap == false && TrackPosition()) {
            map.setCenter(new google.maps.LatLng($("#lat").text(), $("#long").text()));
        }
    }

    function TrackPosition() {
        return $("#trackposition").prop('checked');
    }

    function GetMapStyle() {
        return [
                {
                    featureType: "poi",
                    elementType: "labels",
                    stylers: [
                          { visibility: "off" }
                    ]
                }
        ];
    }

    function GetLatitude(e) {
        if (e === undefined)
            return parseFloat($("#lat").text());
        var currentLatitude = e.coords.latitude;
        currentLatitude = currentLatitude.toString().substring(0, currentLatitude.toString().indexOf(".")).toString() +
                          currentLatitude.toString().substring(currentLatitude.toString().indexOf("."), currentLatitude.toString().indexOf(".") + 7).toString();
        return parseFloat(currentLatitude);
    }

    function GetLongitude(e) {
        if (e === undefined)
            return parseFloat($("#long").text());
        var currentLongitude = e.coords.longitude;
        currentLongitude = currentLongitude.toString().substring(0, currentLongitude.toString().indexOf(".")).toString() +
                          currentLongitude.toString().substring(currentLongitude.toString().indexOf("."), currentLongitude.toString().indexOf(".") + 7).toString();
        return parseFloat(currentLongitude);
    }

    function GetHeading(e) {
        var currentHeading;
        if (e === undefined) {
            currentHeading = $("#heading").text();
            //if (isNaN(currentHeading) || currentHeading == null || currentHeading == "")
                //return 0;
            return parseFloat(currentHeading);
        }
        else {
            currentHeading = e.coords.heading;
            if (isNaN(currentHeading) || currentHeading == null || currentHeading == "")
                return 0;
            else {
                currentHeading = currentHeading.toString().substring(0, currentHeading.toString().indexOf(".")).toString() +
                               currentHeading.toString().substring(currentHeading.toString().indexOf("."), currentHeading.toString().indexOf(".") + 5).toString();
                return parseFloat(currentHeading);
            }
        }
    }

    function GetSpeed(e) {
        var currentSpeed;
        if (e === undefined) {
            currentSpeed = $("#speed").text();
            //if (isNaN(currentSpeed) || currentSpeed == null || currentSpeed == "")
                //return 0;
            return parseFloat(currentSpeed);
        }
        else {
            currentSpeed = e.coords.speed * 2.23694;
            if (isNaN(currentSpeed) || currentSpeed == null || currentSpeed == "")
                return 0;
            else {
                currentSpeed = currentSpeed.toString().substring(0, currentSpeed.toString().indexOf(".")).toString() +
                               currentSpeed.toString().substring(currentSpeed.toString().indexOf("."), currentSpeed.toString().indexOf(".") + 5).toString();
                return parseFloat(currentSpeed);
            }
        }
    }

    function GetModeOfTransportation() {
        if ($("#modeoftransportation").text() === "Walking")
            return 0;
        else if ($("#modeoftransportation").text() === "Driving") {
            return 1;
        }
        else
            return 2;
    }


</script>

<br /><br />
<div class="row">
    <div class="col-md-8">
        <div id="map" style="height:430px;"></div>
    </div>
    <div class="hidden-lg">
        <br />
    </div>
    <div class="col-md-4">
        <div class="panel panel-primary">
            <div class="panel-heading" data-toggle="collapse" data-target="#informationbody" href="#informationbody">
                <h3 class="panel-title">Information</h3>
            </div>
            <div id="informationbody" class="panel-body collapse in">
                <div class="input-group">
                    <div class="row">
                        <div class="col-md-8">
                            <p>Transportation:</p>
                        </div>
                        <div class="col-md-4">
                            <div class="dropdown">
                                <button id="modeoftransportation" class="btn btn-default dropdown-toggle" type="button" data-toggle="dropdown">Mode<span class="caret"></span>
                                </button>
                                <ul class="dropdown-menu">
                                    <li role="presentation"><a id="walking">Walking</a></li>
                                    <li role="presentation"><a id="driving">Driving</a></li>
                                    <li role="presentation"><a id="flying">Flying</a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-8">
                            <p>Track Position:</p>
                        </div>
                        <div class="col-md-4">
                            <input id="trackposition" type="checkbox" data-toggle="toggle">
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-8">
                            <p>Fingerprint:</p>
                        </div>
                        <div class="col-md-4">
                            <div id="fingerprint"></div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-8">
                            <p>Status:</p>
                        </div>
                        <div class="col-md-4">
                            <div id="statuscolor" class="vcenter"></div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-8">
                            <p>Current Speed:</p>
                        </div>
                        <div class="col-md-4">
                            <span id="speed"></span>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-8">
                            <p>Latitude:</p>
                        </div>
                        <div class="col-md-4">
                            <span id="lat"></span>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-8">
                            <p>Longitude</p>
                        </div>
                        <div class="col-md-4">
                            <span id="long"></span>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-8">
                            <p>Heading:</p>
                        </div>
                        <div class="col-md-4">
                            <span id="heading"></span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="panel panel-primary" style="border-color:#df3e3e;">
            <div class="panel-heading" data-toggle="collapse" data-target="#testbody" href="#testbody" style="background-color: #df3e3e;">
                <h3 class="panel-title">Test</h3>
            </div>
            <div id="testbody" class="panel-body collapse in">
                <button id="starttest" class="btn btn-primary disabled" type="button">Start</button>
                <button id="starttest" class="btn btn-danger disabled" type="button">Stop</button>
                <button id="starttest" class="btn btn-default disabled" type="button">Reset</button>
            </div>
        </div>
    </div>
</div>

